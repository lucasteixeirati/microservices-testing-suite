# =============================================================================
# MICROSERVICES TESTING SUITE - Global pytest Configuration
# =============================================================================

[tool:pytest]
# Test Discovery
testpaths = testing-suite
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test Markers
markers =
    unit: Unit tests for individual components
    integration: Integration tests between services
    contract: Contract tests for API compatibility
    chaos: Chaos engineering and resilience tests
    load: Load and stress testing
    api: API endpoint validation tests
    security: Security and vulnerability tests
    performance: Performance and benchmark tests
    ml: Machine Learning and AI component tests
    slow: Tests that take longer than 30 seconds
    smoke: Critical smoke tests for production
    regression: Regression tests for bug fixes
    flaky: Tests that may be unstable

# Output and Reporting
addopts = 
    -v
    --tb=short
    --strict-markers
    --strict-config
    --color=yes
    --durations=10
    --maxfail=5
    --disable-warnings

# Coverage Configuration
addopts = 
    --cov=testing-suite
    --cov-report=html:reports/coverage
    --cov-report=term-missing
    --cov-report=json:reports/coverage.json
    --cov-fail-under=70

# HTML Report Generation
addopts = 
    --html=reports/pytest_report.html
    --self-contained-html

# Timeout Configuration
timeout = 300
timeout_method = thread

# Warnings Management
filterwarnings =
    ignore::pytest.PytestUnknownMarkWarning
    ignore::DeprecationWarning
    ignore::PytestDeprecationWarning
    ignore::UserWarning
    ignore::FutureWarning:sklearn.*
    ignore::FutureWarning:pandas.*
    ignore::RuntimeWarning:numpy.*

# Asyncio Configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Logging Configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = reports/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d: %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Minimum Python Version
minversion = 3.9

# Test Collection
collect_ignore = [
    "setup.py",
    "conftest.py",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/node_modules/*",
    "*/__pycache__/*"
]

# Parallel Execution (when using pytest-xdist)
addopts = -n auto

# JUnit XML for CI/CD
addopts = --junitxml=reports/junit.xml

[tool:pytest_asyncio]
default_fixture_loop_scope = function

[tool:coverage:run]
source = testing-suite
omit = 
    */tests/*
    */test_*
    */venv/*
    */.venv/*
    */migrations/*
    */node_modules/*
    */__pycache__/*
    */conftest.py
    */setup.py

[tool:coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[tool:coverage:html]
directory = reports/coverage

[tool:coverage:json]
output = reports/coverage.json